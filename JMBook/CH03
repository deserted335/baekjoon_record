CH 3. 알고리즘 패러다임

주어진 문제를 해결하기 위해 알고리즘이 택한 관점.

이 문제를 어떻게 풀 것인가? 에 대한 답

문제의 특성 / 동작 시간과 실행 시간 사이의 상충 관계 / 적절한 자료 구조의 선택을 이해해야 한다.

 @ 6. 무식하게 풀기 (브루트 포스 == 완전 탐색)

사람의 손으로 하는 것을 그대로 옮겨옴. 컴퓨터의 계산 능력은 인간보다 빠르다. 

컴퓨터의 정확성과 속도를 이용하는 전략. 모든 경우에 대해 정직하게 계산하게 한다.

- Recursion.
  
  모든 문제를 유사한 문제들로 분해해서 한 step을 실행하고 나머지를 자신을 호출해서 풀게 하는 전략.

  int recusiveSum(int n){
    // 1 ~ n 까지 합 = n + (1 ~ n - 1 까지 합) : 같은 구조(1 ~ k까지 합)의 반복을 볼 수 있다.
    if(n == 1) return 1;    // base case : recursion에서 더 이상 쪼개지지 않는 최소한의 작업 (1 ~ 1 까지 합) 
    return n + recursiveSum(n - 1);
  }

  ex) n개에서 m개 원소 고르는 방법 : for문을 m개 중첩하는 방법이 있지만 재귀로 해결 가능

    void pick(int n, vector<int> &picked, int toPick){
      // n : size, picked : indexes picked so far, toPick : # of not yet picked
      // pick(n, [], m) => "A" + pick(n, [A], m - 1) -> ...
      if(toPick == 0) {printPicked(picked); return;} // base case : pick(n, picked, 0)
      int smallest = picked.empty() ? 0 : picked.back() + 1; // next unpicked index in this pick. << 앞-> 뒤 순서대로...
      for(int next = smallest; next < n; ++next){
        picked.push_back(next); // add "next" element and pass it to next recursion
        pick(n, picked, toPick - 1);
        picked.pop_back();  // return to original state
      }
    }

  ex) BOGGLE
  Obs : "PRETTY", for Str[0], for adjoint element, if Str[1] then repeat this...
        -> for Str[0] element, check if there is "RETTY"
          -> for Str[1] element which is adjoint to Str[0], check if there is "ETTY"
            -> ...
  
  이렇게 조각을 만들어서 (prob를 sub-prob로 만든다.)일부를 답으로 만들고, 나머지를 재귀 호출해 마무리한다.

- 최적화 문제

  ex) TSP : 여행하는 외판원 문제

  double shortestPath(vector<int>& path, vector<bool>& visited, double currentLength){
    // base case : n 개의 도시를 전부 돌았을 때, 다시 0번으로 돌아온다.
    if(path.size() == n) return currentLength + dist[path[0]][path.back()];

    double ret = INF;

    for(int next = 0; next < n; next++){
      if(visited[next]) continue;
      int here = path.back();
      path.push_back(next);
      visitied[next] = true;
      // 재귀 호출...
      double cand = shortestPath(path, visited, currentLength + dist[here][next]);

      ret = min(ret, cand);
      visited[next] = false;
      path.pop_back();
    }
    return ret;
  }

